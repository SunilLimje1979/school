<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>User Profile</title>
<link href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">

<!-- Font Awesome CSS -->
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">

<style>
  .navbar-brand {
    font-size: 24px;
    font-weight: bold;
  }

  .navbar-brand i.fa {
    border: 1px solid white; /* Set border color to white */
    padding: 5px; /* Add padding to increase space around the icon */
    border-radius: 50%; /* Add border radius to make the border rounded */
    color: white; /* Set text color to white */
  }

  .nav_text {
    color: white; /* Set text color to white */
    margin-left: 10px; /* Add left margin of 10px */
  }

  .user-list {
    list-style-type: none;
    padding: 0px;
    padding-top: 10px;
  }

  .user-item {
    margin-bottom: 10px;
    border: 1px solid #ccc; /* Add border */
    padding: 10px; /* Add padding */
  }

  .user-info {
    display: flex; /* Use flexbox */
    justify-content: space-between; /* Arrange items with space between them */
    align-items: center; /* Center items vertically */
  }

  .book-icon {
    color: orange; /* Change icon color to orange */
    font-size: 32px; /* Increase icon size */
    margin-right: 20px;
  }

  .user-date {
    margin-bottom: 10px;
    font-weight: bold;
    font-size: 24px; /* Increase font size */
  }

  .pdf-icon {
    color: #007bff; /* Change PDF icon color */
    font-size: 36px; /* Increase icon size */
  }

  .description {
    margin-top: 10px; /* Add margin on top */
    margin-left: 20px; /* Add margin on left */
    font-size: 18px; /* Increase font size */
    font-weight: bold;
  }

</style>
</head>
<body>

  <nav class="navbar navbar-expand-lg navbar-dark" style="background-color: rgb(57,159,34);">
    <a class="navbar-brand" href="{% url 'dashboard' %}">
        <i class="fa fa-arrow-left" aria-hidden="true"></i>
        {% if assignments.0.type == 'homework' %}
            <span class="nav_text" style="font-weight: bold;">ASSIGNMENT</span> <!-- Bold text -->
        {% else %}
            <span class="nav_text" style="font-weight: bold;">{{ assignments.0.type }}</span>
        {% endif %}
    </a>
</nav>



<div class="container">
  <ul class="user-list">
      <!-- Loop over assignments -->
      {% for assignment in assignments %}
      <li class="user-item">
          <div class="user-info">
              <div class="book-icon">
                  <i class="fas fa-book-open"></i> <!-- Open book icon -->
              </div>
              <div class="user-date">{{ assignment.date }}</div>
              <a href="{% url 'pdf' %}?pdf_link={{ assignment.pdf_link }}&description={{ assignment.description }}" class="pdf-icon">
                <i class="far fa-file-pdf"></i> <!-- PDF icon -->
            </a>
            
          </div>
          <div class="description">
              {{ assignment.description }}
          </div>
      </li>
      {% endfor %}
      <!-- End loop -->
  </ul>
</div>

<script src="https://kit.fontawesome.com/a076d05399.js"></script>
</body>
</html>































##################################### Assigment page ##################################################################

# Your existing view
def Assignment(request):
     # Retrieve the API data from the session
    api_data = json.loads(request.session.get('api_data', '[]'))

    if api_data:
        # Extract necessary fields from api_data
        custid = api_data[0].get('custid', '')
        grno = api_data[0].get('grno', '')
        classid = api_data[0].get('classid', '')
        divid = api_data[0].get('divid', '')
        access = api_data[0].get('access', '')
        mobile_number = api_data[0].get('mobile', '')

        # Update the payload with the retrieved values
        payload = {
            "custid": custid,
            "grno": grno,
            "type": "HOMEWORK",
            "classid": classid,
            "divid": divid,
            "access": access,
            "mobile": mobile_number
        }

        # API endpoint
        api_url = "https://mispack.in/app/admin/public/gettype"

        try:
            # Make a POST request to the API with SSL verification bypassed
            response = requests.post(api_url, json=payload, verify=False)

            # Check if the request was successful (status code 200)
            if response.status_code == 200:
                # Parse the JSON response
                data = response.json()

                # Extract assignments from the response
                assignments = [{
                    "type": assignment['type'],
                    'date': assignment['date'],
                    'description': assignment['description'],
                    'pdf_link': f"https://www.mispack.in/app/application/main/{assignment['uid']}"  # Adjust the link format as per your requirement
                } for assignment in data.get('response', [])]

                # Print the assignments
                # print(assignments)
                
                # Prepare the context to pass to the template
                context = {'assignments': assignments, 'api_data': api_data}

                # Render the template with the context
                return render(request, 'city_school/assignment.html', context)
            else:
                # Handle errors, for example, by returning an error page
                return HttpResponse("Error occurred while fetching data from the API")
        except requests.exceptions.RequestException as e:
            # Handle connection or request errors
            return render(request, 'error.html', {'message': f'Error: {e}'})
    else:
        # Handle the case when api_data is empty
        return render(request, 'error.html', {'message': 'API data not found in session'})

